
smlp_logger - INFO - Model exploration specification:
{'version': '1.2', 'variables': [{'label': 'y1', 'interface': 'output', 'type': 'real'}, {'label': 'y2', 'interface': 'output', 'type': 'real'}, {'label': 'x1', 'interface': 'input', 'type': 'real', 'range': [0, 10]}, {'label': 'x2', 'interface': 'input', 'type': 'int', 'range': [-1, 1]}, {'label': 'p1', 'interface': 'knob', 'type': 'real', 'range': [0, 10], 'rad-rel': 0, 'grid': [2, 4, 7]}, {'label': 'p2', 'interface': 'knob', 'type': 'int', 'range': [3, 7], 'rad-abs': Fraction(1, 5)}], 'alpha': 'p2<5 and x1==10 and x2<12', 'beta': 'y1>=4 and y2>=8', 'eta': 'p1==4 or (p1==8 and p2 > 3)', 'system': {'y1': 'x2 if p2<=0 and x1!=0 else p1', 'y2': 'x2 if p2<=0 and x1!=0 else p1+x1'}, 'assertions': {'assert1': '(y2**3+p2)/2>6', 'assert2': 'y1>=0', 'assert3': 'y2>0'}, 'objectives': {'objective1': '(y1+y2)/2', 'objective2': 'y1'}, 'witnesses': {'query1': {'x1': 10, 'x2': 1, 'p1': 4, 'p2': 3}, 'query2': {'x1': 5, 'x2': 1, 'p1': 7, 'p2': 7}}}

smlp_logger - INFO - Executing run_smlp.py script: Start

smlp_logger - INFO - Running SMLP in mode "certify": Start

smlp_logger - INFO - Computed spec global constraint expressions:

smlp_logger - INFO - Global alpha : p2<5 and x1==10 and x2<12

smlp_logger - INFO - Global beta  : y1>=4 and y2>=8

smlp_logger - INFO - Radii  theta : {'p1': {'rad-abs': None, 'rad-rel': 0}, 'p2': {'rad-abs': Fraction(1, 5), 'rad-rel': None}}

smlp_logger - INFO - Delta  const : {'delta_abs': 0.0, 'delta_rel': 0.01}

smlp_logger - INFO - Assertion assert1: (y2**3+p2)/2>6

smlp_logger - INFO - Assertion assert2: y1>=0

smlp_logger - INFO - Assertion assert3: y2>0

smlp_logger - INFO - Query query1: y1>0

smlp_logger - INFO - Query query2: y2<=0

smlp_logger - INFO - Witness to query query1
{'x1': 10, 'x2': 1, 'p1': 4, 'p2': 3}

smlp_logger - INFO - Witness to query query2
{'x1': 5, 'x2': 1, 'p1': 7, 'p2': 7}

smlp_logger - INFO - Objective objective1: (y1+y2)/2

smlp_logger - INFO - Objective objective2: y1

smlp_logger - INFO - Original system : {'y1': 'x2 if p2<=0 and x1!=0 else p1', 'y2': 'x2 if p2<=0 and x1!=0 else p1+x1'}

smlp_logger - INFO - PREPARE DATA FOR MODELING

smlp_logger - INFO - Preparing training data for modeling: start

smlp_logger - INFO - loading training data

smlp_logger - INFO - data summary
              x1         x2         p1         p2         y1         y2
count  10.000000  10.000000  10.000000  10.000000  10.000000  10.000000
mean    3.695500   0.200000   4.620000   4.800000   3.436300   7.937260
std     3.828165   0.788811   3.116194   1.619328   3.918690   2.847973
min    -0.821800  -1.000000   0.100000   3.000000   0.240000   1.120000
25%     0.364350   0.000000   2.475000   3.250000   0.689550   8.000000
50%     3.423500   0.000000   4.000000   4.500000   0.935000   8.000000
75%     6.694250   1.000000   7.000000   6.000000   5.778325   9.209575
max     9.546000   1.000000  10.000000   7.000000  10.700700  12.020000

smlp_logger - INFO - training data
       x1  x2    p1  p2       y1       y2
0  2.9800  -1   0.1   4   5.0233   8.0000
1  8.5530  -1   3.9   3   0.6936  12.0200
2  0.5580   1   2.0   4   0.6882   8.1400
3  3.8670   0   1.1   3   0.2400   8.0000
4 -0.8218   0   4.0   3   0.3240   8.0000
5  5.2520   0   4.0   5   6.0300   8.0000
6  0.2998   1   7.1   6   0.9100  10.1250
7  7.1750   1   7.0   7   0.9600   1.1200
8  9.5460   0   7.0   6  10.7007   9.5661
9 -0.4540   1  10.0   7   8.7932   6.4015

smlp_logger - INFO - training data after imputing missing values
       x1  x2    p1  p2       y1       y2
0  2.9800  -1   0.1   4   5.0233   8.0000
1  8.5530  -1   3.9   3   0.6936  12.0200
2  0.5580   1   2.0   4   0.6882   8.1400
3  3.8670   0   1.1   3   0.2400   8.0000
4 -0.8218   0   4.0   3   0.3240   8.0000
5  5.2520   0   4.0   5   6.0300   8.0000
6  0.2998   1   7.1   6   0.9100  10.1250
7  7.1750   1   7.0   7   0.9600   1.1200
8  9.5460   0   7.0   6  10.7007   9.5661
9 -0.4540   1  10.0   7   8.7932   6.4015

smlp_logger - INFO - training data after processing responses
       x1  x2    p1  p2       y1       y2
0  2.9800  -1   0.1   4   5.0233   8.0000
1  8.5530  -1   3.9   3   0.6936  12.0200
2  0.5580   1   2.0   4   0.6882   8.1400
3  3.8670   0   1.1   3   0.2400   8.0000
4 -0.8218   0   4.0   3   0.3240   8.0000
5  5.2520   0   4.0   5   6.0300   8.0000
6  0.2998   1   7.1   6   0.9100  10.1250
7  7.1750   1   7.0   7   0.9600   1.1200
8  9.5460   0   7.0   6  10.7007   9.5661
9 -0.4540   1  10.0   7   8.7932   6.4015

smlp_logger - INFO - MRMR feature selection for response y1 : start

smlp_logger - INFO - MRMR selected feature scores (in the ranked order) for response y1 :
  Feature     Score
1      p2  2.982857
0      x1  0.474466

smlp_logger - INFO - MRMR feature selection for response y1 : end

smlp_logger - INFO - MRMR feature selection for response y2 : start

smlp_logger - INFO - MRMR selected feature scores (in the ranked order) for response y2 :
  Feature     Score
1      p2  2.960454
0      x2  2.665766

smlp_logger - INFO - MRMR feature selection for response y2 : end

smlp_logger - INFO - training data after encoding levels of categorical features with integers
       x1  x2    p1  p2       y1       y2
0  2.9800  -1   0.1   4   5.0233   8.0000
1  8.5530  -1   3.9   3   0.6936  12.0200
2  0.5580   1   2.0   4   0.6882   8.1400
3  3.8670   0   1.1   3   0.2400   8.0000
4 -0.8218   0   4.0   3   0.3240   8.0000
5  5.2520   0   4.0   5   6.0300   8.0000
6  0.2998   1   7.1   6   0.9100  10.1250
7  7.1750   1   7.0   7   0.9600   1.1200
8  9.5460   0   7.0   6  10.7007   9.5661
9 -0.4540   1  10.0   7   8.7932   6.4015

smlp_logger - INFO - training data after scaling (normalizing) features and responses
         x1   x2        p1    p2        y1        y2
0  0.366693  0.0  0.000000  0.25  0.457264  0.631193
1  0.904223  0.0  0.383838  0.00  0.043362  1.000000
2  0.133085  1.0  0.191919  0.25  0.042846  0.644037
3  0.452246  0.5  0.101010  0.00  0.000000  0.631193
4  0.000000  0.5  0.393939  0.00  0.008030  0.631193
5  0.585833  0.5  0.393939  0.50  0.553500  0.631193
6  0.108181  1.0  0.707071  0.75  0.064049  0.826147
7  0.771311  1.0  0.696970  1.00  0.068829  0.000000
8  1.000000  0.5  0.696970  0.75  1.000000  0.774872
9  0.035475  1.0  1.000000  1.00  0.817651  0.484541

smlp_logger - INFO - Sampling from training data: start

smlp_logger - INFO - Sampling from training data: end

smlp_logger - INFO - X_train after sampling: (8, 4)

smlp_logger - INFO - y_train after sampling: (8, 2)

smlp_logger - INFO - Preparing training data for modeling: end

smlp_logger - INFO - Saving data bounds into file:./Test116_smlp_toy_basic_data_bounds.json

smlp_logger - INFO - {'x1': {'min': -0.8218, 'max': 9.546}, 'x2': {'min': -1.0, 'max': 1.0}, 'p1': {'min': 0.1, 'max': 10.0}, 'p2': {'min': 3.0, 'max': 7.0}, 'y1': {'min': 0.24, 'max': 10.7007}, 'y2': {'min': 1.12, 'max': 12.02}}

smlp_logger - INFO - Creating model exploration base components: Start

smlp_logger - INFO - Parsing the SPEC: Start

smlp_logger - INFO - Parsing the SPEC: End

smlp_logger - INFO - Variable domains (alpha): {'y1': {'range': 'real', 'interval': None}, 'y2': {'range': 'real', 'interval': None}, 'x1': {'range': 'real', 'interval': [0, 10]}, 'x2': {'range': 'int', 'interval': [-1, 1]}, 'p1': {'range': 'real', 'interval': [0, 10]}, 'p2': {'range': 'int', 'interval': [3, 7]}}

smlp_logger - INFO - Input bounds (alpha): {'x1': {'min': 0, 'max': 10}, 'x2': {'min': -1, 'max': 1}}

smlp_logger - INFO - Knob bounds (eta): {'p1': {'min': 0, 'max': 10}, 'p2': {'min': 3, 'max': 7}}

smlp_logger - INFO - Knob grids (eta): {'p1': [2, 4, 7]}

smlp_logger - INFO - Alpha global   constraints: (and (and (< p2 5) (= x1 10)) (< x2 12))

smlp_logger - INFO - Alpha ranges   constraints: (and (and true (and (>= x1 0) (<= x1 10))) (and (>= x2 (- 1)) (<= x2 1)))

smlp_logger - INFO - Alpha combined constraints: (and (and (and true (and (>= x1 0) (<= x1 10))) (and (>= x2 (- 1)) (<= x2 1))) (and (and (< p2 5) (= x1 10)) (< x2 12)))

smlp_logger - INFO - Beta  global   constraints: (and (>= y1 4) (>= y2 8))

smlp_logger - INFO - Eta   ranges   constraints: (and (and true (and (>= p1 0) (<= p1 10))) (and (>= p2 3) (<= p2 7)))

smlp_logger - INFO - Eta   grid     constraints: (or (or (= p1 2) (= p1 4)) (= p1 7))

smlp_logger - INFO - Eta   global   constraints: true

smlp_logger - INFO - Eta   combined constraints: (let ((|:0| true)) (and (and (and (and |:0| (and (>= p1 0) (<= p1 10))) (and (>= p2 3) (<= p2 7))) (or (or (= p1 2) (= p1 4)) (= p1 7))) |:0|))

smlp_logger - INFO - Creating model exploration base components: End

smlp_logger - INFO - Input and knob interface constraints are consistent

smlp_logger - INFO - Building system terms: Start

smlp_logger - INFO - System terms dictionary: {'y1': <smlp.libsmlp.term2 (ite (and (<= p2 0) (distinct x1 0)) x2 p1)>, 'y2': <smlp.libsmlp.term2 (ite (and (<= p2 0) (distinct x1 0)) x2 (+ p1 x1))>}

smlp_logger - INFO - Building system terms: End

smlp_logger - INFO - Building model terms: Start

smlp_logger - INFO - Model operator counts for y1: {'ite': 1, 'and': 1, 'prop': 2, 'var': 4, 'const': 2}

smlp_logger - INFO - Model operator counts for y2: {'ite': 1, 'and': 1, 'prop': 2, 'var': 5, 'const': 2, 'add': 1}

smlp_logger - INFO - Building model terms: End

smlp_logger - INFO - Model interface constraints are consistent

smlp_logger - INFO - Certifying consistency of witness for query query1:
   (and (and (and (= x1 10) (= x2 1)) (= p1 4)) (= p2 3))

smlp_logger - INFO - Input, knob and concrete witness constraints are consistent

smlp_logger - INFO - Certifying consistency of witness for query query2:
   (and (and (and (= x1 5) (= x2 1)) (= p1 7)) (= p2 7))

smlp_logger - INFO - Input, knob and concrete witness constraints are inconsistent

smlp_logger - INFO - Certifying stability of witness for query query1:
   {'x1': 10, 'x2': 1, 'p1': 4, 'p2': 3}

smlp_logger - INFO - Witness to query query1 is a valid witness; checking its stability

smlp_logger - INFO - Witness to query query1 is stable for radii {'p1': {'rad-abs': None, 'rad-rel': 0}, 'p2': {'rad-abs': Fraction(1, 5), 'rad-rel': None}}

smlp_logger - INFO - Running SMLP in mode "certify": End

smlp_logger - INFO - Executing run_smlp.py script: End

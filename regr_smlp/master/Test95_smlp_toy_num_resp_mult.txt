
smlp_logger - INFO - Model exploration specification:
{'version': '1.1', 'spec': [{'label': 'y1', 'type': 'response', 'range': 'float'}, {'label': 'y2', 'type': 'response', 'range': 'float'}, {'label': 'x', 'type': 'input', 'range': 'float', 'bounds': [0, 10]}, {'label': 'p1', 'type': 'knob', 'range': 'float', 'rad-rel': Fraction(1, 10), 'grid': [2, 4, 7], 'bounds': [0, 10]}, {'label': 'p2', 'type': 'knob', 'range': 'float', 'rad-abs': Fraction(1, 5), 'bounds': [3, 7]}], 'alpha': 'p2<5 and x==10 and  x<12', 'eta': 'p1==4 or p1==8', 'assertions': {'asrt1': '(y2**3+p2)/2>6', 'asrt2': 'y1>=0', 'asrt3': 'y2>0'}, 'objectives': {'objv1': '(y1+y2)/2', 'objv2': 'y1'}}

smlp_logger - INFO - Executing run_smlp.py script: Start

smlp_logger - INFO - Running SMLP in mode "optsyn": Start

smlp_logger - INFO - Computed spec global constraint expressions:

smlp_logger - INFO - Global alpha : p2<5 and x==10 and  x<12

smlp_logger - INFO - Global beta  : None

smlp_logger - INFO - Radii  theta : {'p1': {'rad-abs': None, 'rad-rel': Fraction(1, 10)}, 'p2': {'rad-abs': Fraction(1, 5), 'rad-rel': None}}

smlp_logger - INFO - Delta  const : {'delta_abs': 0.0, 'delta_rel': 0.05}

smlp_logger - INFO - Assertion asrt1: (y2**3+p2)/2>6

smlp_logger - INFO - Assertion asrt2: y1>=0

smlp_logger - INFO - Assertion asrt3: y2>0

smlp_logger - INFO - Objective objv1: (y1+y2)/2

smlp_logger - INFO - Objective objv2: y1

smlp_logger - INFO - PREPARE DATA FOR MODELING

smlp_logger - INFO - Preparing training data for modeling: start

smlp_logger - INFO - loading training data

smlp_logger - INFO - data summary
              y1         y2          x         p1         p2
count  11.000000  11.000000  10.000000  10.000000  11.000000
mean    6.818182   6.818182  10.400000   2.800000   5.454545
std     2.088932   2.088932   1.074968   0.788811   1.694912
min     5.000000   5.000000   9.000000   2.000000   3.000000
25%     5.000000   5.000000  10.000000   2.000000   4.000000
50%     5.000000   5.000000  10.000000   3.000000   6.000000
75%     9.000000   9.000000  11.000000   3.000000   7.000000
max     9.000000   9.000000  12.000000   4.000000   8.000000

smlp_logger - INFO - training data
   categ  y1  y2     x   p1  p2
0    c14   5   9  10.0  2.0   3
1    c15   9   9  12.0  NaN   4
2     c1   5   9   NaN  3.0   4
3     c9   5   5  11.0  2.0   6
4     c5   9   5  10.0  2.0   8
5    c10   9   9   9.0  4.0   7
6    c13   5   5   9.0  3.0   6
7     c4   5   5  10.0  3.0   4
8    c15   9   9  11.0  4.0   4
9    c11   5   5  12.0  2.0   7
10   c19   9   5  10.0  3.0   7

smlp_logger - INFO - training data after imputing missing values
       x   p1  p2  y1  y2
0   10.0  2.0   3   5   9
1   12.0  2.0   4   9   9
2   10.0  3.0   4   5   9
3   11.0  2.0   6   5   5
4   10.0  2.0   8   9   5
5    9.0  4.0   7   9   9
6    9.0  3.0   6   5   5
7   10.0  3.0   4   5   5
8   11.0  4.0   4   9   9
9   12.0  2.0   7   5   5
10  10.0  3.0   7   9   5

smlp_logger - INFO - training data after processing responses
       x   p1  p2  y1  y2
0   10.0  2.0   3   5   9
1   12.0  2.0   4   9   9
2   10.0  3.0   4   5   9
3   11.0  2.0   6   5   5
4   10.0  2.0   8   9   5
5    9.0  4.0   7   9   9
6    9.0  3.0   6   5   5
7   10.0  3.0   4   5   5
8   11.0  4.0   4   9   9
9   12.0  2.0   7   5   5
10  10.0  3.0   7   9   5

smlp_logger - INFO - MRMR feature selection for response y1 : start

smlp_logger - INFO - MRMR selected feature scores (in the ranked order) for response y1 :
  Feature     Score
0      p1  1.115702
1      p2  0.944056

smlp_logger - INFO - MRMR feature selection for response y1 : end

smlp_logger - INFO - MRMR feature selection for response y2 : start

smlp_logger - INFO - MRMR selected feature scores (in the ranked order) for response y2 :
  Feature     Score
1      p2  4.950294
0      p1  1.115702

smlp_logger - INFO - MRMR feature selection for response y2 : end

smlp_logger - INFO - training data after encoding levels of categorical features with integers
       x   p1  p2  y1  y2
0   10.0  2.0   3   5   9
1   12.0  2.0   4   9   9
2   10.0  3.0   4   5   9
3   11.0  2.0   6   5   5
4   10.0  2.0   8   9   5
5    9.0  4.0   7   9   9
6    9.0  3.0   6   5   5
7   10.0  3.0   4   5   5
8   11.0  4.0   4   9   9
9   12.0  2.0   7   5   5
10  10.0  3.0   7   9   5

smlp_logger - INFO - training data after scaling (normalizing) features and responses
           x   p1   p2   y1   y2
0   0.333333  0.0  0.0  0.0  1.0
1   1.000000  0.0  0.2  1.0  1.0
2   0.333333  0.5  0.2  0.0  1.0
3   0.666667  0.0  0.6  0.0  0.0
4   0.333333  0.0  1.0  1.0  0.0
5   0.000000  1.0  0.8  1.0  1.0
6   0.000000  0.5  0.6  0.0  0.0
7   0.333333  0.5  0.2  0.0  0.0
8   0.666667  1.0  0.2  1.0  1.0
9   1.000000  0.0  0.8  0.0  0.0
10  0.333333  0.5  0.8  1.0  0.0

smlp_logger - INFO - Sampling from training data: start

smlp_logger - INFO - Sampling from training data: end

smlp_logger - INFO - X_train after sampling: (8, 3)

smlp_logger - INFO - y_train after sampling: (8, 2)

smlp_logger - INFO - Preparing training data for modeling: end

smlp_logger - INFO - Saving data bounds into file:./Test95_smlp_toy_num_resp_mult_data_bounds.json

smlp_logger - INFO - {'x': {'min': 9.0, 'max': 12.0}, 'p1': {'min': 2.0, 'max': 4.0}, 'p2': {'min': 3.0, 'max': 8.0}, 'y1': {'min': 5.0, 'max': 9.0}, 'y2': {'min': 5.0, 'max': 9.0}}

smlp_logger - INFO - TRAIN MODEL

smlp_logger - INFO - Model training: start

smlp_logger - INFO - Creating dt model: start

smlp_logger - INFO - Creating dt model: end

smlp_logger - INFO - Tuning dt model: start

smlp_logger - INFO - Tuning dt model: end

smlp_logger - INFO - Finalizing dt model: start

smlp_logger - INFO - Finalizing dt model: end

smlp_logger - INFO - Writing tree rules into file ./Test95_smlp_toy_num_resp_mult_y1_dt_caret_tree_rules.txt

smlp_logger - INFO - Creating dt model: start

smlp_logger - INFO - Creating dt model: end

smlp_logger - INFO - Tuning dt model: start

smlp_logger - INFO - Tuning dt model: end

smlp_logger - INFO - Finalizing dt model: start

smlp_logger - INFO - Finalizing dt model: end

smlp_logger - INFO - Writing tree rules into file ./Test95_smlp_toy_num_resp_mult_y2_dt_caret_tree_rules.txt

smlp_logger - INFO - Model training: end

smlp_logger - INFO - PREDICT ON TRAINING DATA

smlp_logger - INFO - Model prediction: start

smlp_logger - INFO - Model prediction: end

smlp_logger - INFO - Reporting prediction results: start

smlp_logger - INFO - Saving predictions summary into file: 
./Test95_smlp_toy_num_resp_mult_training_predictions_summary.csv

smlp_logger - INFO - Saving prediction precisions into file: 
./Test95_smlp_toy_num_resp_mult_training_prediction_precisions.csv

smlp_logger - INFO - Prediction on training data --  msqe: 5.000

smlp_logger - INFO - Prediction on training data --  r2_score: -0.300

smlp_logger - INFO - Reporting prediction results: end

smlp_logger - INFO - PREDICT ON TEST DATA

smlp_logger - INFO - Model prediction: start

smlp_logger - INFO - Model prediction: end

smlp_logger - INFO - Reporting prediction results: start

smlp_logger - INFO - Saving predictions summary into file: 
./Test95_smlp_toy_num_resp_mult_test_predictions_summary.csv

smlp_logger - INFO - Saving prediction precisions into file: 
./Test95_smlp_toy_num_resp_mult_test_prediction_precisions.csv

smlp_logger - INFO - Prediction on test data --  msqe: 7.333

smlp_logger - INFO - Prediction on test data --  r2_score: -1.062

smlp_logger - INFO - Reporting prediction results: end

smlp_logger - INFO - PREDICT ON LABELED DATA

smlp_logger - INFO - Model prediction: start

smlp_logger - INFO - Model prediction: end

smlp_logger - INFO - Reporting prediction results: start

smlp_logger - INFO - Saving predictions summary into file: 
./Test95_smlp_toy_num_resp_mult_labeled_predictions_summary.csv

smlp_logger - INFO - Saving prediction precisions into file: 
./Test95_smlp_toy_num_resp_mult_labeled_prediction_precisions.csv

smlp_logger - INFO - Prediction on labeled data --  msqe: 5.636

smlp_logger - INFO - Prediction on labeled data --  r2_score: -0.421

smlp_logger - INFO - Reporting prediction results: end

smlp_logger - INFO - Creating model exploration base components: Start

smlp_logger - INFO - Parsing the SPEC: Start

smlp_logger - INFO - Parsing the SPEC: End

smlp_logger - INFO - Variable domains (alpha): {'y1': {'range': 'float', 'interval': None}, 'y2': {'range': 'float', 'interval': None}, 'x': {'range': 'float', 'interval': [0, 10]}, 'p1': {'range': 'float', 'interval': [0, 10]}, 'p2': {'range': 'float', 'interval': [3, 7]}}

smlp_logger - INFO - Input bounds (alpha): {'x': {'min': 0, 'max': 10}}

smlp_logger - INFO - Knob bounds (eta): {'p1': {'min': 0, 'max': 10}, 'p2': {'min': 3, 'max': 7}}

smlp_logger - INFO - Knob grids (eta): {'p1': [2, 4, 7]}

smlp_logger - INFO - Alpha global   constraints: (and (and (< p2 5) (= x 10)) (< x 12))

smlp_logger - INFO - Alpha ranges   constraints: (and true (and (>= x 0) (<= x 10)))

smlp_logger - INFO - Alpha combined constraints: (and (and true (and (>= x 0) (<= x 10))) (and (and (< p2 5) (= x 10)) (< x 12)))

smlp_logger - INFO - Beta  global   constraints: true

smlp_logger - INFO - Eta   ranges   constraints: (and (and true (and (>= p1 0) (<= p1 10))) (and (>= p2 3) (<= p2 7)))

smlp_logger - INFO - Eta   grid     constraints: (or (or (= p1 2) (= p1 4)) (= p1 7))

smlp_logger - INFO - Eta   global   constraints: true

smlp_logger - INFO - Eta   combined constraints: (let ((|:0| true)) (and (and (and (and |:0| (and (>= p1 0) (<= p1 10))) (and (>= p2 3) (<= p2 7))) (or (or (= p1 2) (= p1 4)) (= p1 7))) |:0|))

smlp_logger - INFO - Creating model exploration base components: End

smlp_logger - INFO - Input and knob interface constraints are consistent

smlp_logger - INFO - Building model terms: Start

smlp_logger - INFO - Model operator counts for y1: {'const': 1}

smlp_logger - INFO - Model operator counts for y2: {'const': 1}

smlp_logger - INFO - Building model terms: End

smlp_logger - INFO - Model interface constraints are consistent

smlp_logger - INFO - Pareto optimization synthesis feasibility check: Start

smlp_logger - INFO - Querying condition synthesis_feasibility <-> True

smlp_logger - INFO - Query completed with result: STABLE_SAT (satisfiable)

smlp_logger - INFO - Pareto optimization vacuity completed with objectives thresholds: 
    Scaled to [0,1]: {'objv1': '0.250000', 'objv2': '0.500000'}
    Original  scale: {'objv1': '6.000000', 'objv2': '7.000000'}


smlp_logger - INFO - Pareto optimization synthesis feasibility check: End

smlp_logger - INFO - Pareto optimization: Start

smlp_logger - INFO - Optimize single objective objv1_scaled_objv2_scaled: Start

smlp_logger - INFO - Querying condition objv1_scaled_objv2_scaled_1 <-> (let ((|:0| (* (/ 1 4) (- y1 5)))) (let ((|:1| (* (/ 1 4) (- (* (/ 1 2) (+ y1 y2)) 5)))) (and (>= (ite (< |:0| |:1|) |:0| |:1|) 1) (and (and (> (* (/ 1 2) (+ (* (* y2 y2) y2) p2)) 6) (>= y1 0)) (> y2 0)))))

smlp_logger - INFO - Query completed with result: UNSAT (unsatisfiable)

smlp_logger - INFO - Decreasing threshold upper bound for objective objv1_scaled_objv2_scaled from inf to 1

smlp_logger - INFO - Querying condition objv1_scaled_objv2_scaled_0 <-> (let ((|:0| (* (/ 1 4) (- y1 5)))) (let ((|:1| (* (/ 1 4) (- (* (/ 1 2) (+ y1 y2)) 5)))) (and (>= (ite (< |:0| |:1|) |:0| |:1|) 0) (and (and (> (* (/ 1 2) (+ (* (* y2 y2) y2) p2)) 6) (>= y1 0)) (> y2 0)))))

smlp_logger - INFO - Query completed with result: STABLE_SAT (satisfiable)

smlp_logger - INFO - Increasing threshold lower bound for objective objv1_scaled_objv2_scaled from -inf to 0

smlp_logger - INFO - Querying condition objv1_scaled_objv2_scaled_0.5 <-> (let ((|:0| (* (/ 1 4) (- y1 5)))) (let ((|:1| (* (/ 1 4) (- (* (/ 1 2) (+ y1 y2)) 5)))) (and (>= (ite (< |:0| |:1|) |:0| |:1|) (/ 1 2)) (and (and (> (* (/ 1 2) (+ (* (* y2 y2) y2) p2)) 6) (>= y1 0)) (> y2 0)))))

smlp_logger - INFO - Query completed with result: UNSAT (unsatisfiable)

smlp_logger - INFO - Decreasing threshold upper bound for objective objv1_scaled_objv2_scaled from 1 to 0.5

smlp_logger - INFO - Querying condition objv1_scaled_objv2_scaled_0.25 <-> (let ((|:0| (* (/ 1 4) (- y1 5)))) (let ((|:1| (* (/ 1 4) (- (* (/ 1 2) (+ y1 y2)) 5)))) (and (>= (ite (< |:0| |:1|) |:0| |:1|) (/ 1 4)) (and (and (> (* (/ 1 2) (+ (* (* y2 y2) y2) p2)) 6) (>= y1 0)) (> y2 0)))))

smlp_logger - INFO - Query completed with result: STABLE_SAT (satisfiable)

smlp_logger - INFO - Increasing threshold lower bound for objective objv1_scaled_objv2_scaled from 0 to 0.25

smlp_logger - INFO - Pareto optimization in progress with objectives thresholds: 
    Scaled to [0,1]: {'objv1': '0.250000', 'objv2': '0.250000'}
    Original  scale: {'objv1': '6.000000', 'objv2': '6.000000'}


smlp_logger - INFO - Querying condition objv1_scaled_objv2_scaled_0.375 <-> (let ((|:0| (* (/ 1 4) (- y1 5)))) (let ((|:1| (* (/ 1 4) (- (* (/ 1 2) (+ y1 y2)) 5)))) (and (>= (ite (< |:0| |:1|) |:0| |:1|) (/ 3 8)) (and (and (> (* (/ 1 2) (+ (* (* y2 y2) y2) p2)) 6) (>= y1 0)) (> y2 0)))))

smlp_logger - INFO - Query completed with result: UNSAT (unsatisfiable)

smlp_logger - INFO - Decreasing threshold upper bound for objective objv1_scaled_objv2_scaled from 0.5 to 0.375

smlp_logger - INFO - Querying condition objv1_scaled_objv2_scaled_0.3125 <-> (let ((|:0| (* (/ 1 4) (- y1 5)))) (let ((|:1| (* (/ 1 4) (- (* (/ 1 2) (+ y1 y2)) 5)))) (and (>= (ite (< |:0| |:1|) |:0| |:1|) (/ 5 16)) (and (and (> (* (/ 1 2) (+ (* (* y2 y2) y2) p2)) 6) (>= y1 0)) (> y2 0)))))

smlp_logger - INFO - Query completed with result: UNSAT (unsatisfiable)

smlp_logger - INFO - Decreasing threshold upper bound for objective objv1_scaled_objv2_scaled from 0.375 to 0.3125

smlp_logger - INFO - Optimize single objective objv1_scaled_objv2_scaled: End

smlp_logger - INFO - Pareto optimization in progress with objectives thresholds: 
    Scaled to [0,1]: {'objv1': '0.250000', 'objv2': '0.250000'}
    Original  scale: {'objv1': '6.000000', 'objv2': '6.000000'}


smlp_logger - INFO - Checking whether to fix objective 0 at threshold 0.25...


smlp_logger - INFO - Querying condition thresholds_0.35_0.25_check <-> True

smlp_logger - INFO - Query completed with result: UNSAT (unsatisfiable)

smlp_logger - INFO - Fixing objective 0 at threshold 0.25...


smlp_logger - INFO - Checking whether to fix objective 1 at threshold 0.25...


smlp_logger - INFO - Querying condition thresholds_0.25_0.35_check <-> True

smlp_logger - INFO - Query completed with result: UNSAT (unsatisfiable)

smlp_logger - INFO - Fixing objective 1 at threshold 0.25...


smlp_logger - INFO - Pareto optimization completed with objectives thresholds: 
    Scaled to [0,1]: {'objv1': '0.250000', 'objv2': '0.250000'}
    Original  scale: {'objv1': '6.000000', 'objv2': '6.000000'}


smlp_logger - INFO - Pareto optimization: End

smlp_logger - INFO - Running SMLP in mode "optsyn": End

smlp_logger - INFO - Executing run_smlp.py script: End
